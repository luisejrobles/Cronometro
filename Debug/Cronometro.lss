
Cronometro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800200  0000097a  00000a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  008002ce  008002ce  00000adc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001474  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d43  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fb  00000000  00000000  00002dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000034a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  00003d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	65 c3       	rjmp	.+1738   	; 0x720 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 3c       	cpi	r26, 0xCE	; 206
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae ec       	ldi	r26, 0xCE	; 206
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 3f       	cpi	r26, 0xFC	; 252
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c8 d2       	rcall	.+1424   	; 0x6b0 <main>
 120:	2a c4       	rjmp	.+2132   	; 0x976 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <itoa>:
	    		break;
	    }
    }
}
void itoa(char *str, uint16_t num, uint8_t base)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	fc 01       	movw	r30, r24
 12a:	cb 01       	movw	r24, r22
 12c:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t i = 0, j = 0;
	uint16_t aux;
	char dato;
	do{
		aux = num/base;
 12e:	c4 2f       	mov	r28, r20
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	01 c0       	rjmp	.+2      	; 0x136 <itoa+0x12>
 134:	34 2f       	mov	r19, r20
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	23 0f       	add	r18, r19
 13a:	be 01       	movw	r22, r28
 13c:	16 d3       	rcall	.+1580   	; 0x76a <__udivmodhi4>
		( (num%=base)>9 )? (str[j++] = num+'7') : (str[j++] = num+'0');
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	91 05       	cpc	r25, r1
 142:	30 f0       	brcs	.+12     	; 0x150 <itoa+0x2c>
 144:	df 01       	movw	r26, r30
 146:	a2 0f       	add	r26, r18
 148:	b1 1d       	adc	r27, r1
 14a:	89 5c       	subi	r24, 0xC9	; 201
 14c:	8c 93       	st	X, r24
 14e:	05 c0       	rjmp	.+10     	; 0x15a <itoa+0x36>
 150:	df 01       	movw	r26, r30
 152:	a2 0f       	add	r26, r18
 154:	b1 1d       	adc	r27, r1
 156:	80 5d       	subi	r24, 0xD0	; 208
 158:	8c 93       	st	X, r24
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	43 0f       	add	r20, r19
		num = aux;
 15e:	86 2f       	mov	r24, r22
 160:	97 2f       	mov	r25, r23
	}while( num );
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	39 f7       	brne	.-50     	; 0x134 <itoa+0x10>
	str[j--] = '\0';
 166:	df 01       	movw	r26, r30
 168:	a3 0f       	add	r26, r19
 16a:	b1 1d       	adc	r27, r1
 16c:	1c 92       	st	X, r1
	while( i<j )
 16e:	22 23       	and	r18, r18
 170:	79 f0       	breq	.+30     	; 0x190 <itoa+0x6c>
 172:	80 e0       	ldi	r24, 0x00	; 0
	{
		dato = str[i];
 174:	ef 01       	movw	r28, r30
 176:	c8 0f       	add	r28, r24
 178:	d1 1d       	adc	r29, r1
 17a:	98 81       	ld	r25, Y
		str[i++] = str[j];
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	df 01       	movw	r26, r30
 180:	a2 0f       	add	r26, r18
 182:	b1 1d       	adc	r27, r1
 184:	3c 91       	ld	r19, X
 186:	38 83       	st	Y, r19
		str[j--] = dato;
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	9c 93       	st	X, r25
		aux = num/base;
		( (num%=base)>9 )? (str[j++] = num+'7') : (str[j++] = num+'0');
		num = aux;
	}while( num );
	str[j--] = '\0';
	while( i<j )
 18c:	82 17       	cp	r24, r18
 18e:	90 f3       	brcs	.-28     	; 0x174 <itoa+0x50>
	{
		dato = str[i];
		str[i++] = str[j];
		str[j--] = dato;
	}
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <initStructs>:
	{
		return 7;
	}
}
void initStructs( void )
{
 196:	ec ed       	ldi	r30, 0xDC	; 220
 198:	f2 e0       	ldi	r31, 0x02	; 2
 19a:	8c ef       	ldi	r24, 0xFC	; 252
 19c:	92 e0       	ldi	r25, 0x02	; 2
	uint8_t num = 0;
	while( num < 8)
	{
		myLaps[num++].microSegundos = 0;
 19e:	11 92       	st	Z+, r1
 1a0:	11 92       	st	Z+, r1
 1a2:	11 92       	st	Z+, r1
 1a4:	11 92       	st	Z+, r1
	}
}
void initStructs( void )
{
	uint8_t num = 0;
	while( num < 8)
 1a6:	e8 17       	cp	r30, r24
 1a8:	f9 07       	cpc	r31, r25
 1aa:	c9 f7       	brne	.-14     	; 0x19e <initStructs+0x8>
	{
		myLaps[num++].microSegundos = 0;
	}
}
 1ac:	08 95       	ret

000001ae <stopwatch_convert>:
void stopwatch_convert()
{
 1ae:	af 92       	push	r10
 1b0:	bf 92       	push	r11
 1b2:	cf 92       	push	r12
 1b4:	df 92       	push	r13
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	horas = calculoHora(microSeg);
 1c2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <microSeg>
 1c6:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <microSeg+0x1>
 1ca:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <microSeg+0x2>
 1ce:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <microSeg+0x3>
 1d2:	a1 2c       	mov	r10, r1
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f8 e6       	ldi	r31, 0x68	; 104
 1d8:	bf 2e       	mov	r11, r31
 1da:	f0 2d       	mov	r31, r0
 1dc:	0f 2e       	mov	r0, r31
 1de:	f4 ec       	ldi	r31, 0xC4	; 196
 1e0:	cf 2e       	mov	r12, r31
 1e2:	f0 2d       	mov	r31, r0
 1e4:	0f 2e       	mov	r0, r31
 1e6:	f1 e6       	ldi	r31, 0x61	; 97
 1e8:	df 2e       	mov	r13, r31
 1ea:	f0 2d       	mov	r31, r0
 1ec:	68 94       	set
 1ee:	ee 24       	eor	r14, r14
 1f0:	e3 f8       	bld	r14, 3
 1f2:	f1 2c       	mov	r15, r1
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	28 2f       	mov	r18, r24
 1fa:	39 2f       	mov	r19, r25
 1fc:	4a 2f       	mov	r20, r26
 1fe:	5b 2f       	mov	r21, r27
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	e8 d2       	rcall	.+1488   	; 0x7da <__divdi3>
 20a:	82 2f       	mov	r24, r18
 20c:	93 2f       	mov	r25, r19
 20e:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <__data_end+0x1>
 212:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__data_end>
	minutos = calculoMinutos(microSeg)-(horas*36000000000);
 216:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <microSeg>
 21a:	70 91 d7 02 	lds	r23, 0x02D7	; 0x8002d7 <microSeg+0x1>
 21e:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <microSeg+0x2>
 222:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <microSeg+0x3>
 226:	c0 91 ce 02 	lds	r28, 0x02CE	; 0x8002ce <__data_end>
 22a:	d0 91 cf 02 	lds	r29, 0x02CF	; 0x8002cf <__data_end+0x1>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	37 e8       	ldi	r19, 0x87	; 135
 232:	43 e9       	ldi	r20, 0x93	; 147
 234:	53 e0       	ldi	r21, 0x03	; 3
 236:	ad d2       	rcall	.+1370   	; 0x792 <__udivmodsi4>
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	78 e9       	ldi	r23, 0x98	; 152
 23c:	c6 9f       	mul	r28, r22
 23e:	c0 01       	movw	r24, r0
 240:	c7 9f       	mul	r28, r23
 242:	90 0d       	add	r25, r0
 244:	d6 9f       	mul	r29, r22
 246:	90 0d       	add	r25, r0
 248:	11 24       	eor	r1, r1
 24a:	28 0f       	add	r18, r24
 24c:	39 1f       	adc	r19, r25
 24e:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <minutos+0x1>
 252:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <minutos>
	segundos = calculoSegundos(microSeg)-(minutos*60000000);
 256:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <microSeg>
 25a:	70 91 d7 02 	lds	r23, 0x02D7	; 0x8002d7 <microSeg+0x1>
 25e:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <microSeg+0x2>
 262:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <microSeg+0x3>
 266:	c0 91 d0 02 	lds	r28, 0x02D0	; 0x8002d0 <minutos>
 26a:	d0 91 d1 02 	lds	r29, 0x02D1	; 0x8002d1 <minutos+0x1>
 26e:	20 e4       	ldi	r18, 0x40	; 64
 270:	32 e4       	ldi	r19, 0x42	; 66
 272:	4f e0       	ldi	r20, 0x0F	; 15
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	8d d2       	rcall	.+1306   	; 0x792 <__udivmodsi4>
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	79 e7       	ldi	r23, 0x79	; 121
 27c:	c6 9f       	mul	r28, r22
 27e:	c0 01       	movw	r24, r0
 280:	c7 9f       	mul	r28, r23
 282:	90 0d       	add	r25, r0
 284:	d6 9f       	mul	r29, r22
 286:	90 0d       	add	r25, r0
 288:	11 24       	eor	r1, r1
 28a:	28 0f       	add	r18, r24
 28c:	39 1f       	adc	r19, r25
 28e:	30 93 d3 02 	sts	0x02D3, r19	; 0x8002d3 <segundos+0x1>
 292:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <segundos>
	milisegundos = calculoMiliSegundos(microSeg)-(segundos*1000000);
 296:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <microSeg>
 29a:	70 91 d7 02 	lds	r23, 0x02D7	; 0x8002d7 <microSeg+0x1>
 29e:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <microSeg+0x2>
 2a2:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <microSeg+0x3>
 2a6:	c0 91 d2 02 	lds	r28, 0x02D2	; 0x8002d2 <segundos>
 2aa:	d0 91 d3 02 	lds	r29, 0x02D3	; 0x8002d3 <segundos+0x1>
 2ae:	28 ee       	ldi	r18, 0xE8	; 232
 2b0:	33 e0       	ldi	r19, 0x03	; 3
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	6d d2       	rcall	.+1242   	; 0x792 <__udivmodsi4>
 2b8:	60 ec       	ldi	r22, 0xC0	; 192
 2ba:	7d eb       	ldi	r23, 0xBD	; 189
 2bc:	c6 9f       	mul	r28, r22
 2be:	c0 01       	movw	r24, r0
 2c0:	c7 9f       	mul	r28, r23
 2c2:	90 0d       	add	r25, r0
 2c4:	d6 9f       	mul	r29, r22
 2c6:	90 0d       	add	r25, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	28 0f       	add	r18, r24
 2cc:	39 1f       	adc	r19, r25
 2ce:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <milisegundos+0x1>
 2d2:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <milisegundos>
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	08 95       	ret

000002ec <stopwatch_lapConvert>:
void stopwatch_lapConvert( uint8_t lap )
{
 2ec:	7f 92       	push	r7
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	78 2e       	mov	r7, r24
	horas = calculoHora(microSeg);
 308:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <microSeg>
 30c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <microSeg+0x1>
 310:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <microSeg+0x2>
 314:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <microSeg+0x3>
 318:	a1 2c       	mov	r10, r1
 31a:	0f 2e       	mov	r0, r31
 31c:	f8 e6       	ldi	r31, 0x68	; 104
 31e:	bf 2e       	mov	r11, r31
 320:	f0 2d       	mov	r31, r0
 322:	0f 2e       	mov	r0, r31
 324:	f4 ec       	ldi	r31, 0xC4	; 196
 326:	cf 2e       	mov	r12, r31
 328:	f0 2d       	mov	r31, r0
 32a:	0f 2e       	mov	r0, r31
 32c:	f1 e6       	ldi	r31, 0x61	; 97
 32e:	df 2e       	mov	r13, r31
 330:	f0 2d       	mov	r31, r0
 332:	68 94       	set
 334:	ee 24       	eor	r14, r14
 336:	e3 f8       	bld	r14, 3
 338:	f1 2c       	mov	r15, r1
 33a:	00 e0       	ldi	r16, 0x00	; 0
 33c:	10 e0       	ldi	r17, 0x00	; 0
 33e:	28 2f       	mov	r18, r24
 340:	39 2f       	mov	r19, r25
 342:	4a 2f       	mov	r20, r26
 344:	5b 2f       	mov	r21, r27
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	45 d2       	rcall	.+1162   	; 0x7da <__divdi3>
 350:	82 2f       	mov	r24, r18
 352:	93 2f       	mov	r25, r19
 354:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <__data_end+0x1>
 358:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__data_end>
	minutos = calculoMinutos(myLaps[lap].microSegundos)-(horas*36000000000);
 35c:	80 90 ce 02 	lds	r8, 0x02CE	; 0x8002ce <__data_end>
 360:	90 90 cf 02 	lds	r9, 0x02CF	; 0x8002cf <__data_end+0x1>
 364:	e7 2d       	mov	r30, r7
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	e4 52       	subi	r30, 0x24	; 36
 372:	fd 4f       	sbci	r31, 0xFD	; 253
 374:	60 81       	ld	r22, Z
 376:	71 81       	ldd	r23, Z+1	; 0x01
 378:	82 81       	ldd	r24, Z+2	; 0x02
 37a:	93 81       	ldd	r25, Z+3	; 0x03
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	37 e8       	ldi	r19, 0x87	; 135
 380:	43 e9       	ldi	r20, 0x93	; 147
 382:	53 e0       	ldi	r21, 0x03	; 3
 384:	06 d2       	rcall	.+1036   	; 0x792 <__udivmodsi4>
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	78 e9       	ldi	r23, 0x98	; 152
 38a:	86 9e       	mul	r8, r22
 38c:	c0 01       	movw	r24, r0
 38e:	87 9e       	mul	r8, r23
 390:	90 0d       	add	r25, r0
 392:	96 9e       	mul	r9, r22
 394:	90 0d       	add	r25, r0
 396:	11 24       	eor	r1, r1
 398:	28 0f       	add	r18, r24
 39a:	39 1f       	adc	r19, r25
 39c:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <minutos+0x1>
 3a0:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <minutos>
	segundos = calculoSegundos(microSeg)-(minutos*60000000);
 3a4:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <microSeg>
 3a8:	70 91 d7 02 	lds	r23, 0x02D7	; 0x8002d7 <microSeg+0x1>
 3ac:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <microSeg+0x2>
 3b0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <microSeg+0x3>
 3b4:	80 90 d0 02 	lds	r8, 0x02D0	; 0x8002d0 <minutos>
 3b8:	90 90 d1 02 	lds	r9, 0x02D1	; 0x8002d1 <minutos+0x1>
 3bc:	20 e4       	ldi	r18, 0x40	; 64
 3be:	32 e4       	ldi	r19, 0x42	; 66
 3c0:	4f e0       	ldi	r20, 0x0F	; 15
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	e6 d1       	rcall	.+972    	; 0x792 <__udivmodsi4>
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	79 e7       	ldi	r23, 0x79	; 121
 3ca:	86 9e       	mul	r8, r22
 3cc:	c0 01       	movw	r24, r0
 3ce:	87 9e       	mul	r8, r23
 3d0:	90 0d       	add	r25, r0
 3d2:	96 9e       	mul	r9, r22
 3d4:	90 0d       	add	r25, r0
 3d6:	11 24       	eor	r1, r1
 3d8:	28 0f       	add	r18, r24
 3da:	39 1f       	adc	r19, r25
 3dc:	30 93 d3 02 	sts	0x02D3, r19	; 0x8002d3 <segundos+0x1>
 3e0:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <segundos>
	milisegundos = calculoMiliSegundos(microSeg)-(segundos*1000000);
 3e4:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <microSeg>
 3e8:	70 91 d7 02 	lds	r23, 0x02D7	; 0x8002d7 <microSeg+0x1>
 3ec:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <microSeg+0x2>
 3f0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <microSeg+0x3>
 3f4:	80 90 d2 02 	lds	r8, 0x02D2	; 0x8002d2 <segundos>
 3f8:	90 90 d3 02 	lds	r9, 0x02D3	; 0x8002d3 <segundos+0x1>
 3fc:	28 ee       	ldi	r18, 0xE8	; 232
 3fe:	33 e0       	ldi	r19, 0x03	; 3
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	c6 d1       	rcall	.+908    	; 0x792 <__udivmodsi4>
 406:	60 ec       	ldi	r22, 0xC0	; 192
 408:	7d eb       	ldi	r23, 0xBD	; 189
 40a:	86 9e       	mul	r8, r22
 40c:	c0 01       	movw	r24, r0
 40e:	87 9e       	mul	r8, r23
 410:	90 0d       	add	r25, r0
 412:	96 9e       	mul	r9, r22
 414:	90 0d       	add	r25, r0
 416:	11 24       	eor	r1, r1
 418:	28 0f       	add	r18, r24
 41a:	39 1f       	adc	r19, r25
 41c:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <milisegundos+0x1>
 420:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <milisegundos>
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	df 90       	pop	r13
 432:	cf 90       	pop	r12
 434:	bf 90       	pop	r11
 436:	af 90       	pop	r10
 438:	9f 90       	pop	r9
 43a:	8f 90       	pop	r8
 43c:	7f 90       	pop	r7
 43e:	08 95       	ret

00000440 <stopwatch_lap>:
	UART0_puts(":");
	UART0_puts(milisegundosCad);
}
uint8_t stopwatch_lap( void )
{
	if( lap<8 )
 440:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <lap>
 444:	e8 30       	cpi	r30, 0x08	; 8
 446:	c8 f4       	brcc	.+50     	; 0x47a <stopwatch_lap+0x3a>
	{
		myLaps[lap++].microSegundos = microSeg;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	8e 0f       	add	r24, r30
 44c:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <lap>
 450:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <microSeg>
 454:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <microSeg+0x1>
 458:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <microSeg+0x2>
 45c:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <microSeg+0x3>
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e4 52       	subi	r30, 0x24	; 36
 46c:	fd 4f       	sbci	r31, 0xFD	; 253
 46e:	80 83       	st	Z, r24
 470:	91 83       	std	Z+1, r25	; 0x01
 472:	a2 83       	std	Z+2, r26	; 0x02
 474:	b3 83       	std	Z+3, r27	; 0x03
		return 1; 
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	08 95       	ret
	}
	return 0;
 47a:	80 e0       	ldi	r24, 0x00	; 0
}
 47c:	08 95       	ret

0000047e <stopwatch_start>:
		UART0_puts("\n\r");
	}
}
void stopwatch_start( void )
{
	TCCR0B = (2<<CS00);
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	85 bd       	out	0x25, r24	; 37
	startedFlag = 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <startedFlag>
 488:	08 95       	ret

0000048a <stopwatch_stop>:
}
void stopwatch_stop( void )
{
	TCCR0B = 0;
 48a:	15 bc       	out	0x25, r1	; 37
	startedFlag = 0;
 48c:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <startedFlag>
 490:	08 95       	ret

00000492 <stopwatch_reset>:
}
void stopwatch_reset( void )
{
	startedFlag = 0;
 492:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <startedFlag>
	initStructs();
	stopwatch_stop();
 496:	7f de       	rcall	.-770    	; 0x196 <initStructs>
	microSeg = 0;
 498:	f8 df       	rcall	.-16     	; 0x48a <stopwatch_stop>
 49a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <microSeg>
 49e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <microSeg+0x1>
 4a2:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <microSeg+0x2>
 4a6:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <microSeg+0x3>
 4aa:	08 95       	ret

000004ac <Timer0_init>:
}
void Timer0_init( void )
{
	TCCR0A = (2<<WGM00);	//CTC
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
 4b0:	16 bc       	out	0x26, r1	; 38
	OCR0A = 8-1;
 4b2:	97 e0       	ldi	r25, 0x07	; 7
 4b4:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);
 4b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	sei();
 4ba:	78 94       	sei
 4bc:	08 95       	ret

000004be <UARTO_init>:
}
void UARTO_init( void )
{
	UBRR0 = 103;
 4be:	87 e6       	ldi	r24, 0x67	; 103
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 4c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0A = (1<<U2X0);
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 4d0:	88 e1       	ldi	r24, 0x18	; 24
 4d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);
 4d6:	86 e0       	ldi	r24, 0x06	; 6
 4d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 4dc:	08 95       	ret

000004de <UART0_putchar>:
		UART0_putchar( *str++ );
	}
}
void UART0_putchar( char dato )
{
	while( !(UCSR0A&(1<<UDRE0)) );
 4de:	e0 ec       	ldi	r30, 0xC0	; 192
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	90 81       	ld	r25, Z
 4e4:	95 ff       	sbrs	r25, 5
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <UART0_putchar+0x4>
	UDR0 = dato;
 4e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 4ec:	08 95       	ret

000004ee <UART0_puts>:
	UCSR0A = (1<<U2X0);
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UCSR0C = (3<<UCSZ00);
}
void UART0_puts( char *str )
{
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
	while( *str )
 4f4:	88 81       	ld	r24, Y
 4f6:	88 23       	and	r24, r24
 4f8:	29 f0       	breq	.+10     	; 0x504 <UART0_puts+0x16>
	{
		UART0_putchar( *str++ );
 4fa:	21 96       	adiw	r28, 0x01	; 1
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
	UCSR0C = (3<<UCSZ00);
}
void UART0_puts( char *str )
{
	while( *str )
 4fc:	f0 df       	rcall	.-32     	; 0x4de <UART0_putchar>
 4fe:	89 91       	ld	r24, Y+
 500:	81 11       	cpse	r24, r1
	{
		UART0_putchar( *str++ );
	}
}
 502:	fc cf       	rjmp	.-8      	; 0x4fc <UART0_puts+0xe>
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <stopwatch_display>:
	minutos = calculoMinutos(myLaps[lap].microSegundos)-(horas*36000000000);
	segundos = calculoSegundos(microSeg)-(minutos*60000000);
	milisegundos = calculoMiliSegundos(microSeg)-(segundos*1000000);
}
void stopwatch_display( void )
{
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	60 97       	sbiw	r28, 0x10	; 16
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
	char horasCad[4];
	char minutosCad[4];
	char segundosCad[4];
	char milisegundosCad[4];
	stopwatch_convert();
 51c:	cd bf       	out	0x3d, r28	; 61
	itoa(horasCad,horas,10);
 51e:	47 de       	rcall	.-882    	; 0x1ae <stopwatch_convert>
 520:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <__data_end>
 524:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <__data_end+0x1>
 528:	4a e0       	ldi	r20, 0x0A	; 10
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
	itoa(minutosCad,minutos,10);
 52e:	fa dd       	rcall	.-1036   	; 0x124 <itoa>
 530:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <minutos>
 534:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <minutos+0x1>
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	ce 01       	movw	r24, r28
 53c:	05 96       	adiw	r24, 0x05	; 5
	itoa(segundosCad,segundos,10);
 53e:	f2 dd       	rcall	.-1052   	; 0x124 <itoa>
 540:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <segundos>
 544:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <segundos+0x1>
 548:	4a e0       	ldi	r20, 0x0A	; 10
 54a:	ce 01       	movw	r24, r28
 54c:	09 96       	adiw	r24, 0x09	; 9
	itoa(milisegundosCad,milisegundos,10);
 54e:	ea dd       	rcall	.-1068   	; 0x124 <itoa>
 550:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <milisegundos>
 554:	70 91 d5 02 	lds	r23, 0x02D5	; 0x8002d5 <milisegundos+0x1>
 558:	4a e0       	ldi	r20, 0x0A	; 10
	UART0_puts("\n\rCronometro al momento es:");
 55a:	ce 01       	movw	r24, r28
 55c:	0d 96       	adiw	r24, 0x0d	; 13
	UART0_puts("\n\r");
 55e:	e2 dd       	rcall	.-1084   	; 0x124 <itoa>
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	92 e0       	ldi	r25, 0x02	; 2
	UART0_puts(horasCad);
 564:	c4 df       	rcall	.-120    	; 0x4ee <UART0_puts>
 566:	8c e1       	ldi	r24, 0x1C	; 28
	UART0_puts(":");
 568:	92 e0       	ldi	r25, 0x02	; 2
 56a:	c1 df       	rcall	.-126    	; 0x4ee <UART0_puts>
	UART0_puts(minutosCad);
 56c:	ce 01       	movw	r24, r28
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	be df       	rcall	.-132    	; 0x4ee <UART0_puts>
	UART0_puts(":");
 572:	8a e1       	ldi	r24, 0x1A	; 26
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	bb df       	rcall	.-138    	; 0x4ee <UART0_puts>
	UART0_puts(segundosCad);
 578:	ce 01       	movw	r24, r28
 57a:	05 96       	adiw	r24, 0x05	; 5
 57c:	b8 df       	rcall	.-144    	; 0x4ee <UART0_puts>
 57e:	8a e1       	ldi	r24, 0x1A	; 26
	UART0_puts(":");
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	b5 df       	rcall	.-150    	; 0x4ee <UART0_puts>
 584:	ce 01       	movw	r24, r28
 586:	09 96       	adiw	r24, 0x09	; 9
	UART0_puts(milisegundosCad);
 588:	b2 df       	rcall	.-156    	; 0x4ee <UART0_puts>
 58a:	8a e1       	ldi	r24, 0x1A	; 26
 58c:	92 e0       	ldi	r25, 0x02	; 2
 58e:	af df       	rcall	.-162    	; 0x4ee <UART0_puts>
}
 590:	ce 01       	movw	r24, r28
 592:	0d 96       	adiw	r24, 0x0d	; 13
 594:	ac df       	rcall	.-168    	; 0x4ee <UART0_puts>
 596:	60 96       	adiw	r28, 0x10	; 16
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <stopwatch_showLap>:
		return 1; 
	}
	return 0;
}
void stopwatch_showLap( void )
{
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	60 97       	sbiw	r28, 0x10	; 16
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
	char minutosCad[4];
	char segundosCad[4];
	char milisegundosCad[4];
	uint8_t lap = 0;
	
	UART0_puts("\n\rLaps guardadas son: ");
 5be:	8f e1       	ldi	r24, 0x1F	; 31
 5c0:	92 e0       	ldi	r25, 0x02	; 2
 5c2:	95 df       	rcall	.-214    	; 0x4ee <UART0_puts>
{
	char horasCad[4];
	char minutosCad[4];
	char segundosCad[4];
	char milisegundosCad[4];
	uint8_t lap = 0;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
	
	UART0_puts("\n\rLaps guardadas son: ");
	while(lap<8)
	{
		stopwatch_lapConvert(lap++);
 5c6:	11 e0       	ldi	r17, 0x01	; 1
 5c8:	18 0f       	add	r17, r24
 5ca:	90 de       	rcall	.-736    	; 0x2ec <stopwatch_lapConvert>
		itoa(horasCad,horas,10);
 5cc:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <__data_end>
 5d0:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <__data_end+0x1>
 5d4:	4a e0       	ldi	r20, 0x0A	; 10
 5d6:	ce 01       	movw	r24, r28
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	a4 dd       	rcall	.-1208   	; 0x124 <itoa>
		itoa(minutosCad,minutos,10);
 5dc:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <minutos>
 5e0:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <minutos+0x1>
 5e4:	4a e0       	ldi	r20, 0x0A	; 10
 5e6:	ce 01       	movw	r24, r28
 5e8:	05 96       	adiw	r24, 0x05	; 5
 5ea:	9c dd       	rcall	.-1224   	; 0x124 <itoa>
		itoa(segundosCad,segundos,10);
 5ec:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <segundos>
 5f0:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <segundos+0x1>
 5f4:	4a e0       	ldi	r20, 0x0A	; 10
 5f6:	ce 01       	movw	r24, r28
 5f8:	09 96       	adiw	r24, 0x09	; 9
 5fa:	94 dd       	rcall	.-1240   	; 0x124 <itoa>
		itoa(milisegundosCad,milisegundos,10);
 5fc:	60 91 d4 02 	lds	r22, 0x02D4	; 0x8002d4 <milisegundos>
 600:	70 91 d5 02 	lds	r23, 0x02D5	; 0x8002d5 <milisegundos+0x1>
 604:	4a e0       	ldi	r20, 0x0A	; 10
 606:	ce 01       	movw	r24, r28
		UART0_puts("\n\r");
 608:	0d 96       	adiw	r24, 0x0d	; 13
 60a:	8c dd       	rcall	.-1256   	; 0x124 <itoa>
 60c:	8c e1       	ldi	r24, 0x1C	; 28
		UART0_puts(horasCad);
 60e:	92 e0       	ldi	r25, 0x02	; 2
 610:	6e df       	rcall	.-292    	; 0x4ee <UART0_puts>
		UART0_puts(":");
 612:	ce 01       	movw	r24, r28
 614:	01 96       	adiw	r24, 0x01	; 1
		UART0_puts(minutosCad);
 616:	6b df       	rcall	.-298    	; 0x4ee <UART0_puts>
 618:	8a e1       	ldi	r24, 0x1A	; 26
 61a:	92 e0       	ldi	r25, 0x02	; 2
		UART0_puts(":");
 61c:	68 df       	rcall	.-304    	; 0x4ee <UART0_puts>
 61e:	ce 01       	movw	r24, r28
		UART0_puts(segundosCad);
 620:	05 96       	adiw	r24, 0x05	; 5
 622:	65 df       	rcall	.-310    	; 0x4ee <UART0_puts>
 624:	8a e1       	ldi	r24, 0x1A	; 26
		UART0_puts(":");
 626:	92 e0       	ldi	r25, 0x02	; 2
 628:	62 df       	rcall	.-316    	; 0x4ee <UART0_puts>
 62a:	ce 01       	movw	r24, r28
 62c:	09 96       	adiw	r24, 0x09	; 9
		UART0_puts(milisegundosCad);
 62e:	5f df       	rcall	.-322    	; 0x4ee <UART0_puts>
 630:	8a e1       	ldi	r24, 0x1A	; 26
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	5c df       	rcall	.-328    	; 0x4ee <UART0_puts>
		UART0_puts("\n\r");
 636:	ce 01       	movw	r24, r28
 638:	0d 96       	adiw	r24, 0x0d	; 13
 63a:	59 df       	rcall	.-334    	; 0x4ee <UART0_puts>
 63c:	8c e1       	ldi	r24, 0x1C	; 28
	uint8_t lap = 0;
	
	UART0_puts("\n\rLaps guardadas son: ");
	while(lap<8)
	{
		stopwatch_lapConvert(lap++);
 63e:	92 e0       	ldi	r25, 0x02	; 2
	char segundosCad[4];
	char milisegundosCad[4];
	uint8_t lap = 0;
	
	UART0_puts("\n\rLaps guardadas son: ");
	while(lap<8)
 640:	56 df       	rcall	.-340    	; 0x4ee <UART0_puts>
 642:	81 2f       	mov	r24, r17
 644:	18 30       	cpi	r17, 0x08	; 8
		UART0_puts(segundosCad);
		UART0_puts(":");
		UART0_puts(milisegundosCad);
		UART0_puts("\n\r");
	}
}
 646:	09 f0       	breq	.+2      	; 0x64a <stopwatch_showLap+0xa2>
 648:	be cf       	rjmp	.-132    	; 0x5c6 <stopwatch_showLap+0x1e>
 64a:	60 96       	adiw	r28, 0x10	; 16
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	08 95       	ret

0000065e <UART0_getchar>:
	while( !(UCSR0A&(1<<UDRE0)) );
	UDR0 = dato;
}
char UART0_getchar( void )
{
	while( !(UCSR0A&(1<<RXC0)) );
 65e:	e0 ec       	ldi	r30, 0xC0	; 192
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	88 23       	and	r24, r24
 666:	ec f7       	brge	.-6      	; 0x662 <UART0_getchar+0x4>
	return UDR0; 
 668:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 66c:	08 95       	ret

0000066e <getOp>:
		str[i++] = str[j];
		str[j--] = dato;
	}
}
uint8_t getOp( void )
{
 66e:	f7 df       	rcall	.-18     	; 0x65e <UART0_getchar>
 670:	8f 7d       	andi	r24, 0xDF	; 223
 672:	83 34       	cpi	r24, 0x43	; 67
 674:	89 f0       	breq	.+34     	; 0x698 <getOp+0x2a>
 676:	80 35       	cpi	r24, 0x50	; 80
 678:	89 f0       	breq	.+34     	; 0x69c <getOp+0x2e>
 67a:	8c 34       	cpi	r24, 0x4C	; 76
 67c:	29 f4       	brne	.+10     	; 0x688 <getOp+0x1a>
 67e:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <startedFlag>
 682:	91 11       	cpse	r25, r1
 684:	0d c0       	rjmp	.+26     	; 0x6a0 <getOp+0x32>
 686:	02 c0       	rjmp	.+4      	; 0x68c <getOp+0x1e>
 688:	82 35       	cpi	r24, 0x52	; 82
 68a:	61 f0       	breq	.+24     	; 0x6a4 <getOp+0x36>
 68c:	86 35       	cpi	r24, 0x56	; 86
 68e:	61 f0       	breq	.+24     	; 0x6a8 <getOp+0x3a>
 690:	83 35       	cpi	r24, 0x53	; 83
 692:	61 f0       	breq	.+24     	; 0x6ac <getOp+0x3e>
 694:	87 e0       	ldi	r24, 0x07	; 7
 696:	08 95       	ret
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	08 95       	ret
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	08 95       	ret
 6a0:	83 e0       	ldi	r24, 0x03	; 3
 6a2:	08 95       	ret
 6a4:	84 e0       	ldi	r24, 0x04	; 4
 6a6:	08 95       	ret
 6a8:	85 e0       	ldi	r24, 0x05	; 5
 6aa:	08 95       	ret
 6ac:	86 e0       	ldi	r24, 0x06	; 6
 6ae:	08 95       	ret

000006b0 <main>:
 6b0:	06 df       	rcall	.-500    	; 0x4be <UARTO_init>
 6b2:	fc de       	rcall	.-520    	; 0x4ac <Timer0_init>
 6b4:	86 e3       	ldi	r24, 0x36	; 54
 6b6:	92 e0       	ldi	r25, 0x02	; 2
 6b8:	1a df       	rcall	.-460    	; 0x4ee <UART0_puts>
 6ba:	6d dd       	rcall	.-1318   	; 0x196 <initStructs>
 6bc:	8d e4       	ldi	r24, 0x4D	; 77
 6be:	92 e0       	ldi	r25, 0x02	; 2
 6c0:	16 df       	rcall	.-468    	; 0x4ee <UART0_puts>
 6c2:	8f e5       	ldi	r24, 0x5F	; 95
 6c4:	92 e0       	ldi	r25, 0x02	; 2
 6c6:	13 df       	rcall	.-474    	; 0x4ee <UART0_puts>
 6c8:	8c e6       	ldi	r24, 0x6C	; 108
 6ca:	92 e0       	ldi	r25, 0x02	; 2
 6cc:	10 df       	rcall	.-480    	; 0x4ee <UART0_puts>
 6ce:	88 e7       	ldi	r24, 0x78	; 120
 6d0:	92 e0       	ldi	r25, 0x02	; 2
 6d2:	0d df       	rcall	.-486    	; 0x4ee <UART0_puts>
 6d4:	85 e8       	ldi	r24, 0x85	; 133
 6d6:	92 e0       	ldi	r25, 0x02	; 2
 6d8:	0a df       	rcall	.-492    	; 0x4ee <UART0_puts>
 6da:	85 e9       	ldi	r24, 0x95	; 149
 6dc:	92 e0       	ldi	r25, 0x02	; 2
 6de:	07 df       	rcall	.-498    	; 0x4ee <UART0_puts>
 6e0:	c6 df       	rcall	.-116    	; 0x66e <getOp>
 6e2:	83 30       	cpi	r24, 0x03	; 3
 6e4:	81 f0       	breq	.+32     	; 0x706 <main+0x56>
 6e6:	28 f4       	brcc	.+10     	; 0x6f2 <main+0x42>
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	49 f0       	breq	.+18     	; 0x6fe <main+0x4e>
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	49 f0       	breq	.+18     	; 0x702 <main+0x52>
 6f0:	e4 cf       	rjmp	.-56     	; 0x6ba <main+0xa>
 6f2:	85 30       	cpi	r24, 0x05	; 5
 6f4:	89 f0       	breq	.+34     	; 0x718 <main+0x68>
 6f6:	70 f0       	brcs	.+28     	; 0x714 <main+0x64>
 6f8:	86 30       	cpi	r24, 0x06	; 6
 6fa:	81 f0       	breq	.+32     	; 0x71c <main+0x6c>
 6fc:	de cf       	rjmp	.-68     	; 0x6ba <main+0xa>
 6fe:	bf de       	rcall	.-642    	; 0x47e <stopwatch_start>
 700:	dc cf       	rjmp	.-72     	; 0x6ba <main+0xa>
 702:	c3 de       	rcall	.-634    	; 0x48a <stopwatch_stop>
 704:	da cf       	rjmp	.-76     	; 0x6ba <main+0xa>
 706:	9c de       	rcall	.-712    	; 0x440 <stopwatch_lap>
 708:	81 11       	cpse	r24, r1
 70a:	d7 cf       	rjmp	.-82     	; 0x6ba <main+0xa>
 70c:	8b ea       	ldi	r24, 0xAB	; 171
 70e:	92 e0       	ldi	r25, 0x02	; 2
 710:	ee de       	rcall	.-548    	; 0x4ee <UART0_puts>
 712:	d3 cf       	rjmp	.-90     	; 0x6ba <main+0xa>
 714:	be de       	rcall	.-644    	; 0x492 <stopwatch_reset>
 716:	d1 cf       	rjmp	.-94     	; 0x6ba <main+0xa>
 718:	47 df       	rcall	.-370    	; 0x5a8 <stopwatch_showLap>
 71a:	cf cf       	rjmp	.-98     	; 0x6ba <main+0xa>
 71c:	f6 de       	rcall	.-532    	; 0x50a <stopwatch_display>
 71e:	cd cf       	rjmp	.-102    	; 0x6ba <main+0xa>

00000720 <__vector_21>:
 720:	1f 92       	push	r1
 722:	0f 92       	push	r0
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	0f 92       	push	r0
 728:	11 24       	eor	r1, r1
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
 72e:	af 93       	push	r26
 730:	bf 93       	push	r27
 732:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <microSeg>
 736:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <microSeg+0x1>
 73a:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <microSeg+0x2>
 73e:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <microSeg+0x3>
 742:	04 96       	adiw	r24, 0x04	; 4
 744:	a1 1d       	adc	r26, r1
 746:	b1 1d       	adc	r27, r1
 748:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <microSeg>
 74c:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <microSeg+0x1>
 750:	a0 93 d8 02 	sts	0x02D8, r26	; 0x8002d8 <microSeg+0x2>
 754:	b0 93 d9 02 	sts	0x02D9, r27	; 0x8002d9 <microSeg+0x3>
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <__udivmodhi4>:
 76a:	aa 1b       	sub	r26, r26
 76c:	bb 1b       	sub	r27, r27
 76e:	51 e1       	ldi	r21, 0x11	; 17
 770:	07 c0       	rjmp	.+14     	; 0x780 <__udivmodhi4_ep>

00000772 <__udivmodhi4_loop>:
 772:	aa 1f       	adc	r26, r26
 774:	bb 1f       	adc	r27, r27
 776:	a6 17       	cp	r26, r22
 778:	b7 07       	cpc	r27, r23
 77a:	10 f0       	brcs	.+4      	; 0x780 <__udivmodhi4_ep>
 77c:	a6 1b       	sub	r26, r22
 77e:	b7 0b       	sbc	r27, r23

00000780 <__udivmodhi4_ep>:
 780:	88 1f       	adc	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	5a 95       	dec	r21
 786:	a9 f7       	brne	.-22     	; 0x772 <__udivmodhi4_loop>
 788:	80 95       	com	r24
 78a:	90 95       	com	r25
 78c:	bc 01       	movw	r22, r24
 78e:	cd 01       	movw	r24, r26
 790:	08 95       	ret

00000792 <__udivmodsi4>:
 792:	a1 e2       	ldi	r26, 0x21	; 33
 794:	1a 2e       	mov	r1, r26
 796:	aa 1b       	sub	r26, r26
 798:	bb 1b       	sub	r27, r27
 79a:	fd 01       	movw	r30, r26
 79c:	0d c0       	rjmp	.+26     	; 0x7b8 <__udivmodsi4_ep>

0000079e <__udivmodsi4_loop>:
 79e:	aa 1f       	adc	r26, r26
 7a0:	bb 1f       	adc	r27, r27
 7a2:	ee 1f       	adc	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	a2 17       	cp	r26, r18
 7a8:	b3 07       	cpc	r27, r19
 7aa:	e4 07       	cpc	r30, r20
 7ac:	f5 07       	cpc	r31, r21
 7ae:	20 f0       	brcs	.+8      	; 0x7b8 <__udivmodsi4_ep>
 7b0:	a2 1b       	sub	r26, r18
 7b2:	b3 0b       	sbc	r27, r19
 7b4:	e4 0b       	sbc	r30, r20
 7b6:	f5 0b       	sbc	r31, r21

000007b8 <__udivmodsi4_ep>:
 7b8:	66 1f       	adc	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	1a 94       	dec	r1
 7c2:	69 f7       	brne	.-38     	; 0x79e <__udivmodsi4_loop>
 7c4:	60 95       	com	r22
 7c6:	70 95       	com	r23
 7c8:	80 95       	com	r24
 7ca:	90 95       	com	r25
 7cc:	9b 01       	movw	r18, r22
 7ce:	ac 01       	movw	r20, r24
 7d0:	bd 01       	movw	r22, r26
 7d2:	cf 01       	movw	r24, r30
 7d4:	08 95       	ret

000007d6 <__moddi3>:
 7d6:	68 94       	set
 7d8:	01 c0       	rjmp	.+2      	; 0x7dc <__divdi3_moddi3>

000007da <__divdi3>:
 7da:	e8 94       	clt

000007dc <__divdi3_moddi3>:
 7dc:	f9 2f       	mov	r31, r25
 7de:	f1 2b       	or	r31, r17
 7e0:	0a f0       	brmi	.+2      	; 0x7e4 <__divdi3_moddi3+0x8>
 7e2:	27 c0       	rjmp	.+78     	; 0x832 <__udivdi3_umoddi3>
 7e4:	a0 e0       	ldi	r26, 0x00	; 0
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	e7 ef       	ldi	r30, 0xF7	; 247
 7ea:	f3 e0       	ldi	r31, 0x03	; 3
 7ec:	93 c0       	rjmp	.+294    	; 0x914 <__prologue_saves__+0xc>
 7ee:	09 2e       	mov	r0, r25
 7f0:	05 94       	asr	r0
 7f2:	1a f4       	brpl	.+6      	; 0x7fa <__divdi3_moddi3+0x1e>
 7f4:	79 d0       	rcall	.+242    	; 0x8e8 <__negdi2>
 7f6:	11 23       	and	r17, r17
 7f8:	92 f4       	brpl	.+36     	; 0x81e <__divdi3_moddi3+0x42>
 7fa:	f0 e8       	ldi	r31, 0x80	; 128
 7fc:	0f 26       	eor	r0, r31
 7fe:	ff ef       	ldi	r31, 0xFF	; 255
 800:	e0 94       	com	r14
 802:	f0 94       	com	r15
 804:	00 95       	com	r16
 806:	10 95       	com	r17
 808:	b0 94       	com	r11
 80a:	c0 94       	com	r12
 80c:	d0 94       	com	r13
 80e:	a1 94       	neg	r10
 810:	bf 0a       	sbc	r11, r31
 812:	cf 0a       	sbc	r12, r31
 814:	df 0a       	sbc	r13, r31
 816:	ef 0a       	sbc	r14, r31
 818:	ff 0a       	sbc	r15, r31
 81a:	0f 0b       	sbc	r16, r31
 81c:	1f 0b       	sbc	r17, r31
 81e:	13 d0       	rcall	.+38     	; 0x846 <__udivmod64>
 820:	07 fc       	sbrc	r0, 7
 822:	62 d0       	rcall	.+196    	; 0x8e8 <__negdi2>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	ec e0       	ldi	r30, 0x0C	; 12
 82a:	90 c0       	rjmp	.+288    	; 0x94c <__epilogue_restores__+0xc>

0000082c <__umoddi3>:
 82c:	68 94       	set
 82e:	01 c0       	rjmp	.+2      	; 0x832 <__udivdi3_umoddi3>

00000830 <__udivdi3>:
 830:	e8 94       	clt

00000832 <__udivdi3_umoddi3>:
 832:	8f 92       	push	r8
 834:	9f 92       	push	r9
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	05 d0       	rcall	.+10     	; 0x846 <__udivmod64>
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	9f 90       	pop	r9
 842:	8f 90       	pop	r8
 844:	08 95       	ret

00000846 <__udivmod64>:
 846:	88 24       	eor	r8, r8
 848:	99 24       	eor	r9, r9
 84a:	f4 01       	movw	r30, r8
 84c:	e4 01       	movw	r28, r8
 84e:	b0 e4       	ldi	r27, 0x40	; 64
 850:	9f 93       	push	r25
 852:	aa 27       	eor	r26, r26
 854:	9a 15       	cp	r25, r10
 856:	8b 04       	cpc	r8, r11
 858:	9c 04       	cpc	r9, r12
 85a:	ed 05       	cpc	r30, r13
 85c:	fe 05       	cpc	r31, r14
 85e:	cf 05       	cpc	r28, r15
 860:	d0 07       	cpc	r29, r16
 862:	a1 07       	cpc	r26, r17
 864:	98 f4       	brcc	.+38     	; 0x88c <__udivmod64+0x46>
 866:	ad 2f       	mov	r26, r29
 868:	dc 2f       	mov	r29, r28
 86a:	cf 2f       	mov	r28, r31
 86c:	fe 2f       	mov	r31, r30
 86e:	e9 2d       	mov	r30, r9
 870:	98 2c       	mov	r9, r8
 872:	89 2e       	mov	r8, r25
 874:	98 2f       	mov	r25, r24
 876:	87 2f       	mov	r24, r23
 878:	76 2f       	mov	r23, r22
 87a:	65 2f       	mov	r22, r21
 87c:	54 2f       	mov	r21, r20
 87e:	43 2f       	mov	r20, r19
 880:	32 2f       	mov	r19, r18
 882:	22 27       	eor	r18, r18
 884:	b8 50       	subi	r27, 0x08	; 8
 886:	31 f7       	brne	.-52     	; 0x854 <__udivmod64+0xe>
 888:	bf 91       	pop	r27
 88a:	27 c0       	rjmp	.+78     	; 0x8da <__udivmod64+0x94>
 88c:	1b 2e       	mov	r1, r27
 88e:	bf 91       	pop	r27
 890:	bb 27       	eor	r27, r27
 892:	22 0f       	add	r18, r18
 894:	33 1f       	adc	r19, r19
 896:	44 1f       	adc	r20, r20
 898:	55 1f       	adc	r21, r21
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	88 1c       	adc	r8, r8
 8a4:	99 1c       	adc	r9, r9
 8a6:	ee 1f       	adc	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	cc 1f       	adc	r28, r28
 8ac:	dd 1f       	adc	r29, r29
 8ae:	aa 1f       	adc	r26, r26
 8b0:	bb 1f       	adc	r27, r27
 8b2:	8a 14       	cp	r8, r10
 8b4:	9b 04       	cpc	r9, r11
 8b6:	ec 05       	cpc	r30, r12
 8b8:	fd 05       	cpc	r31, r13
 8ba:	ce 05       	cpc	r28, r14
 8bc:	df 05       	cpc	r29, r15
 8be:	a0 07       	cpc	r26, r16
 8c0:	b1 07       	cpc	r27, r17
 8c2:	48 f0       	brcs	.+18     	; 0x8d6 <__udivmod64+0x90>
 8c4:	8a 18       	sub	r8, r10
 8c6:	9b 08       	sbc	r9, r11
 8c8:	ec 09       	sbc	r30, r12
 8ca:	fd 09       	sbc	r31, r13
 8cc:	ce 09       	sbc	r28, r14
 8ce:	df 09       	sbc	r29, r15
 8d0:	a0 0b       	sbc	r26, r16
 8d2:	b1 0b       	sbc	r27, r17
 8d4:	21 60       	ori	r18, 0x01	; 1
 8d6:	1a 94       	dec	r1
 8d8:	e1 f6       	brne	.-72     	; 0x892 <__udivmod64+0x4c>
 8da:	2e f4       	brtc	.+10     	; 0x8e6 <__udivmod64+0xa0>
 8dc:	94 01       	movw	r18, r8
 8de:	af 01       	movw	r20, r30
 8e0:	be 01       	movw	r22, r28
 8e2:	cd 01       	movw	r24, r26
 8e4:	00 0c       	add	r0, r0
 8e6:	08 95       	ret

000008e8 <__negdi2>:
 8e8:	60 95       	com	r22
 8ea:	70 95       	com	r23
 8ec:	80 95       	com	r24
 8ee:	90 95       	com	r25
 8f0:	30 95       	com	r19
 8f2:	40 95       	com	r20
 8f4:	50 95       	com	r21
 8f6:	21 95       	neg	r18
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	4f 4f       	sbci	r20, 0xFF	; 255
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	6f 4f       	sbci	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	08 95       	ret

00000908 <__prologue_saves__>:
 908:	2f 92       	push	r2
 90a:	3f 92       	push	r3
 90c:	4f 92       	push	r4
 90e:	5f 92       	push	r5
 910:	6f 92       	push	r6
 912:	7f 92       	push	r7
 914:	8f 92       	push	r8
 916:	9f 92       	push	r9
 918:	af 92       	push	r10
 91a:	bf 92       	push	r11
 91c:	cf 92       	push	r12
 91e:	df 92       	push	r13
 920:	ef 92       	push	r14
 922:	ff 92       	push	r15
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
 930:	ca 1b       	sub	r28, r26
 932:	db 0b       	sbc	r29, r27
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	f8 94       	cli
 938:	de bf       	out	0x3e, r29	; 62
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	cd bf       	out	0x3d, r28	; 61
 93e:	19 94       	eijmp

00000940 <__epilogue_restores__>:
 940:	2a 88       	ldd	r2, Y+18	; 0x12
 942:	39 88       	ldd	r3, Y+17	; 0x11
 944:	48 88       	ldd	r4, Y+16	; 0x10
 946:	5f 84       	ldd	r5, Y+15	; 0x0f
 948:	6e 84       	ldd	r6, Y+14	; 0x0e
 94a:	7d 84       	ldd	r7, Y+13	; 0x0d
 94c:	8c 84       	ldd	r8, Y+12	; 0x0c
 94e:	9b 84       	ldd	r9, Y+11	; 0x0b
 950:	aa 84       	ldd	r10, Y+10	; 0x0a
 952:	b9 84       	ldd	r11, Y+9	; 0x09
 954:	c8 84       	ldd	r12, Y+8	; 0x08
 956:	df 80       	ldd	r13, Y+7	; 0x07
 958:	ee 80       	ldd	r14, Y+6	; 0x06
 95a:	fd 80       	ldd	r15, Y+5	; 0x05
 95c:	0c 81       	ldd	r16, Y+4	; 0x04
 95e:	1b 81       	ldd	r17, Y+3	; 0x03
 960:	aa 81       	ldd	r26, Y+2	; 0x02
 962:	b9 81       	ldd	r27, Y+1	; 0x01
 964:	ce 0f       	add	r28, r30
 966:	d1 1d       	adc	r29, r1
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	0f be       	out	0x3f, r0	; 63
 970:	cd bf       	out	0x3d, r28	; 61
 972:	ed 01       	movw	r28, r26
 974:	08 95       	ret

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
